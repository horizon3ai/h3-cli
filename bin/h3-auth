#!/bin/bash
#
# usage:
#
# h3-auth           # read cached jwt file if exists
# h3-auth force     # force re-auth
#
#

# pull in env vars and util fns
source h3-env 

# JWT is stored here
jwt_file="$H3_CLI_PROFILES_DIR/$H3_CLI_PROFILE.jwt"


# @returns json response: {"token":"..."}
function gen_jwt {
    if [ "$H3_AUTH_URL" = "sandbox" ]; then
        echo '{"token":"sandbox"}'
        return 0
    fi
    curl -s -S \
      -X POST $H3_AUTH_URL \
      -H 'Content-Type: application/json' \
      -d @- <<HERE 
{
    "key": "$H3_API_KEY"
}
HERE
}


function refresh_jwt {
    echolog "authenticating to H3_AUTH_URL=$H3_AUTH_URL ..."
    res=`gen_jwt`
    # check if the curl request failed
    rc=$?
    if [ $rc -ne 0 ]; then
        echoerr "ERROR: " $res
        H3_API_JWT=""
        echo $H3_API_JWT > "$jwt_file"
        return $rc
    fi 
    # check if we didn't get a token back
    token=`cat <<<$res | jq -r .token`
    if [ "$token" = "null" ]; then
        echoerr "ERROR: " $res
        H3_API_JWT=""
        echo $H3_API_JWT > "$jwt_file"
        return 1
    fi
    # success! set env var, write it to jwt file
    H3_API_JWT=$token
    echo $H3_API_JWT > "$jwt_file"
    echolog H3_API_JWT=$H3_API_JWT
    return 0
}


# 1. check env var 
# 2. read it from the file
# 3. refresh it
# sets H3_API_JWT in the environment
function read_jwt {
    if [ -z "$H3_API_JWT" ]; then
        if [ -f "$jwt_file" ]; then
            H3_API_JWT=`cat "$jwt_file"`
            H3_API_JWT=`echo $H3_API_JWT`    # gets rid of newlines 
        fi 
    fi
    if [ -z "$H3_API_JWT" ]; then
        refresh_jwt
    fi
}


cmd=$1
shift

if [ -z "$cmd" ]; then
    read_jwt

elif [ "$cmd" = "force" ]; then
    refresh_jwt
fi

rc=$?
if [ $rc -eq 0 ]; then
    echo $H3_API_JWT 
fi

exit $rc

