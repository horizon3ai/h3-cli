#!/bin/bash
#
# 
# usage: h3-create-auto-injected-credential '{"key_type":"cleartext","user":"SMOKE\rob","cleartext":"mypassword"}'
# usage: h3-create-auto-injected-credential '{"key_type":"cleartext","user":"rob","cleartext":"mypassword","ip":"192.168.65.3"}'
# usage: h3-create-auto-injected-credential '{"key_type":"ntlm_hash","user":"rob","hash":"myhash"}'
# usage: h3-create-auto-injected-credential '{"key_type":"ntlm_hash","user":"rob","hash":"myhash","ip":"192.168.65.3"}'
# usage: h3-create-auto-injected-credential '{"key_type":"aws","aws_access_key_id":"AKxxxxLIWA2Y7OSxxxxx","aws_secret_access_key":"DSAfRxxxxxxxxxxxxZaZolXbsBOl0c/2dxxxxxxx","aws_session_token":"IQoJb3JpZ2luX2VjEJn//////////xxxxxxxxxxxxxQtMSJHMEUCIQCY2MrLnqdwEJXkWVhT7BhUfifAFZ40IyU4yz0MNhVUNQIgEhepE9kZdw2qDJFkeQKoZp+eIKBhqIBUmfP/GfW7wMYqkQMIkv//////////ARACGgwxMjA2NzU1NjUwMzciDC/A3VZNb+LIRgwB+SrlAiNdpo4G868uouYHWupz6e2npbJZZOwlW44odgBpqzvx0B7rH+mlmhO2Ja206SsR1aAyUEYyIQ/MkkAWlrf+gTY3U8mU5YcR/SPAdVUBnzxm4oAoNWNRmoaJE6lIn4dbWiyX+YREvYbfMiKFpOzZXpVbP+hUZCBXl0lHxbirC6U0eZBCcfldP2wwcE10zXr4afKrsdG7rtaUEcgNB+xBE61VQGK7CiRs/b6q9IK+dTaLg2+TYL/+nkvZvZe7aSCykE7pNdKxxeXmcB3B8Vdc00ZKcr7V4O5thFsdnSwhrXenXlFV3fEZAwLXb+/kKQMuy+3/Ibb+KXxty5hL5xhspEMv3KcLdojgg6k451t0J0I4VBH6D1RZ1MmuFann+YC8T5zg9al06cumhwTXpc8ZaB2KDC4OrtiZAZjMvIRrqwu+tD4e7zDGXdxn6F7+B/mKNFPg3F6bEVWevYjLsueUbJmQcMVAejCWvtGoBjqmAWjuBZdQbuyiObng/rUz83ZMVOGEsJ3lzEs3tpXeU4XExf3dF9Ur3t+hbycDn81uYxcrUImI3KfrwufVkMROSfo0uojALu8y5o1ln2Po8fI9xHCFeZSgOH2v5k0cEcZj7u+yZVC8I+eLCzgYGnrJRcVb+TIjbk+iT3gE5rlCWM3/C4LEPHgg9kknBhctftNR2hzofR7L+CALEljIWQN5b2R2BUTWASw="}'
#

# 0.
# include common utils
source h3-env

# 1.
# parse args

# check for optional sse arg
# if specified, the cred is encrypted on the server-side; 
# otherwise the cred is encrypted client-side using openssl.
sse=$1
if [ "$sse" = "sse" ]; then
    shift
else    
    sse=
fi

# read json input
input=$1

if [ -z "$input" ]; then 
    prompterr "Please provide JSON input on a single line: "
    read -r input
    input=`trim_quotes "$input"`
fi

if [ -z "$input" ]; then 
    echoerr "ERROR: InjectedCredentialInput data is required"
    exit 1
fi

# 2. 
# build variables payload
if [ -z "$sse" ]; then 
    # client-side encryption: only send non-secret fields to GQL
    gql_input=`cat <<<$input | jq -c '{key_type, user, aws_access_key_id, ip}'`
else
    # server-side encryption: send everything
    gql_input="$input"
fi
v=`cat <<HERE
{
    "input": $gql_input
}
HERE
`
v1=`escape_splat "$v"`

# 3.
# invoke h3-gql
res=`h3-gql create_auto_injected_credential "$v1"`
rc=$?
if [ $rc -ne 0 ]; then
    echo "$res"
    exit $rc
fi

# 4.
# write the encrypted secret locally
uuid=`cat <<<$res | jq -r .data.create_auto_injected_credential.auto_injected_credential.uuid`
secret_file="$H3_CLI_PROFILES_DIR/$uuid.h3ec"

if [ -z "$sse" ]; then
    # handle client-side encryption
    echoerr "INFO: Writing auto-injected credential secret to $secret_file using openssl"
    aes_key_hex=`cat <<<$res | jq -r .data.create_auto_injected_credential.aes_key_hex`
    aes_iv_hex=`cat <<<$res | jq -r .data.create_auto_injected_credential.aes_iv_hex`
    secret_input=`cat <<<$input | jq -c '{cleartext, hash, aws_secret_access_key, aws_session_token}'`
    echo "$secret_input" | openssl enc -aes-256-cbc -base64 -K "$aes_key_hex" -iv "$aes_iv_hex" -out "$secret_file"
    rc=$?
else
    # handle server-side encryption
    echoerr "INFO: Writing auto-injected credential secret to $secret_file "
    encrypted_secret=`cat <<<$res | jq -r .data.create_auto_injected_credential.encrypted_secret`
    echo "$encrypted_secret" > "$secret_file"
    rc=$?
fi

if [ $rc -ne 0 ]; then
    echoerr "ERROR: Failed to write secret to $secret_file"
    exit $rc
fi

