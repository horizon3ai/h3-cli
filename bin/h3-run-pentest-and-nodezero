#!/bin/bash
#
# Simple shell script for scheduling and running a pentest. 
#
# If the pentest is an INTERNAL pentest (aka op_type=NodeZero), this script will also download and launch NodeZero.
# NodeZero will continue running the pentest in the background (as a Docker container) after this script exits
# (in other words, the script does not wait for NodeZero to finish).
#
# usage: h3-run-pentest-and-nodezero
# usage: h3-run-pentest-and-nodezero '{"op_template_name":"your-op-template-here"}'
#
#

source h3-env


#
# exit the bash script if the given pentest is still active.
# usage: exit_if_pentest_is_active $pentest
# $pentest: a pentest record in JSON format (as returned from fetch_pentest)
# 
function exit_if_pentest_is_active {
    pentest="$1"
    if [ -z "$pentest" ]; then
        return 0
    fi
    pentest_name=`cat <<<$pentest | jq -r .name`
    pentest_state=`cat <<<$pentest | jq -r .state`
    if [ "$pentest_state" = "done" -o "$pentest_state" = "ended" -o "$pentest_state" = "processing" ]; then
        return 0
    fi
    echoerr "ERROR: Pentest \"$pentest_name\" is still active; state=$pentest_state"
    exit 1
}


# 1. 
# check if a pentest is already running
latest_pentest=`h3 latest-pentest`
exit_if_pentest_is_active "$latest_pentest"


# 2. 
# provision the pentest 
op=`h3 run-pentest $*`
rc=$?
if [ $rc -ne 0 ]; then
    echo $op
    exit $rc
fi
op_name=`cat <<<$op | jq -r .op_name`
op_id=`cat <<<$op | jq -r .op_id`
echoerr "Created pentest \"$op_name\" with op_id $op_id"


# 3. 
# download and run NodeZero™ IFF this is a NodeZero pentest
op_type=`cat <<<$op | jq -r .op_type`
if [ "$op_type" = "NodeZero" ]; then
    echoerr "Running NodeZero™ ... "
    h3 run-nodezero $op_id
fi

