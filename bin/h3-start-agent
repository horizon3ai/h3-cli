#!/bin/bash
#
# Starts the H3 agent.
# Intended to be run as a backgraound process.
#
# See: $ h3 start-agent
#
# usage: h3-start-agent {agent-name} {log-file}
#

# bootstrap PATH if needed
function bootstrap_path {
    if ! command -v h3-env &> /dev/null; then
        if [ -n "$BASH_SOURCE" ]; then s="$BASH_SOURCE"; else s="$0"; fi
        d=`dirname "$s"`
        rc=$?
        if [ $rc -eq 0 ]; then 
            PATH="$d:$PATH"
        fi
    fi
}
bootstrap_path

# 0.
# include common utils
source h3-env


# :returns: the set of uuids pulled from filenames under ~/.h3/*.h3ec
function read_auto_injected_credential_uuids {
    for x in $H3_CLI_PROFILES_DIR/*.h3ec; do 
        basename "$x" .h3ec; 
    done
}


# :returns: a json array containing the uuids from read_auto_injected_credential_uuids.
function build_auto_injected_credential_uuids_param {
    uuids=`read_auto_injected_credential_uuids`
    if [ -z "$uuids" ]; then 
        echo '[]'
    else
        jq -ncR '[inputs]' <<< "$uuids"
    fi
}


#
# Helper function for building the JSON parameters 
# for the GraphQL request.
#
function build_json_params {
    name=$1
    uname=$2
    log_file=$3
    h3_cli_version=$4
    pid=$$
    uid=$UID
    auto_injected_credential_uuids=`build_auto_injected_credential_uuids_param`
    cat <<HERE
{"input":{"name":"$name","uname":"$uname","log_file":"$log_file","h3_cli_version":"$h3_cli_version","pid":"$pid","uid":"$UID","auto_injected_credential_uuids":$auto_injected_credential_uuids}}
HERE
}


function sleepy {
    agent_name=$1
    sleep_s=60
    echolog "[$agent_name:$$] Sleeping for $sleep_s seconds"
    sleep $sleep_s
}


# 1.
# parse args
agent_name=$1
log_file=$2
# get the h3-cli-version at startup and remember it.
# if h3-cli is upgraded underneath, then h3 version will return the new version; 
# however this runner is still running at the old version (at least this particular module, h3-start-agent).  
# the runner needs to be restarted to pick up the new version.
h3_cli_version=`h3 version`

if [ -z "$agent_name" ]; then
    echoerr "name is required"
    exit 1
fi

if [ -z "$log_file" ]; then
    echoerr "log-file is required"
    exit 1
fi


# 2.
# periodically poll for the next command to run
echoerr "[$agent_name:$$] NodeZero Runner started."
while [ 1 ]; do

    # a.
    # fetch the next agent command
    uname=`uname -a`
    json_params=`build_json_params "$agent_name" "$uname" "$log_file" "$h3_cli_version"`
    res=`h3-gql next_agent_command "$json_params"`
    rc=$?
    if [ $rc -ne 0 ]; then
        echoerr "[$agent_name:$$] API request failed: rc=$rc, res=$res"
        sleepy "$agent_name"
        continue
    fi
 
    # b.
    # parse the command
    agent_command=`cat <<<$res | jq -r .data.next_agent_command`
    if [ "$agent_command" = "null" -o -z "$agent_command" ]; then
        sleepy "$agent_name"
        continue 
    fi

    # c.
    # run the command
    echoerr "[$agent_name:$$] Received command: $agent_command"
    command_uuid=`cat <<<$agent_command | jq -r .uuid`
    command=`cat <<<$agent_command | jq -r .command`
    echoerr "[$agent_name:$$] Running command in a separate process: $command"
    # special-handle upgrade command.  
    if [ "$command" = "upgrade" ]; then 
        h3-run-command "$command_uuid" "$command"   # run synchonously.
        rc=$?
        if [ $rc -eq 0 ]; then 
            # restart the agent.
            echoerr "[$agent_name:$$] Restarting NodeZero Runner ... "
            # if launched by systemd, just exit the process. systemd will restart it.
            if was_launched_by_systemd; then 
                exit 1
            fi
            # NOTE: command dup'ed in h3 and h3-start-agent.
            nohup h3-start-agent "$agent_name" "$log_file" < /dev/null >> "$log_file" 2>&1 &
            echoerr "[$agent_name:$$] Previous NodeZero Runner process is exiting."
            exit 0
        fi
    else
        h3-run-command "$command_uuid" "$command" &
    fi


    sleepy "$agent_name"
done


echoerr "[$agent_name:$$] NodeZero Runner process is exiting."